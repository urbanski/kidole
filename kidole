#!/usr/bin/env python
import json
import pprint
import sys
import re
import argparse

#overrdiable constants
SIG_DIR = "fingerprints/"
SIG_FILE = ""

#global variables
url_list = ""       #list of urls to match against
fpdata = ""         #fingerprint data structure

#load fingerprints from file
def load_fingerprints():
    json_data = open("fingerprints/webapps.ky").read()
    
    #comments are not JSON-compatible. is support necessary?
    for line in json_data:
        if line[0:1] == "#":
            json_data.replace(line,"")
            
            
    data = json.loads(json_data)
    return data

#process all command line arguments
def handle_cmd_line():
    global url_list
    
    desc = """Kidole is a passive URL fingerprinting tool. It is designed to attempt to passively identify web applications, web services, and systems that may be running on a web server by observing the HTTP requests that are made to the device. Kidole supports python regular expressions."""
    
    parser = argparse.ArgumentParser(description=desc)
    
    signature_group = parser.add_argument_group('fingerprints','')
    signature_group.add_argument('-sD','--sig-dir',required=False,dest="sig_dir",help="Directory containing signatures", metavar="DIRECTORY")
    signature_group.add_argument('-sF', '--sig-file', required=False, dest="sig_file", help="File containing signatures", metavar="FILE")
        
    parser.add_argument('-f, --file', required=False, default=None, dest="input_file", help="url input file to read", metavar="FILE")

    
    (args) = parser.parse_args()

    #handle input file
    if (args.input_file == None):
        #read from stdin
        url_list = sys.stdin.readlines()
    else:
        #read from file
        fptr = open(args.input_file,'r')
        url_list = fptr.readlines()
    

#this is the main part of the application
def main():
    global url_list
    global fpdata
    fpdata = load_fingerprints()
    
    for url in url_list:
        for signature_group in fpdata:
            for app_group in fpdata[signature_group]:
                for app_name in app_group:
                    for sig in app_group[app_name]:
                        if (re.search(sig, url)):
                            print "%s|%s|%s|%s" % (signature_group, app_name, sig, url)
                            
#application entrypoint
handle_cmd_line()
main()
